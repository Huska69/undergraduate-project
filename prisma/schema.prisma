generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  email            String             @unique
  password         String
  firstName        String
  lastName         String
  nationality      String
  age              Int? // Optional
  sex              String
  pregnancy        String?
  height           Int?
  weight           Int?
  contact          Int?
  blood            String?
  allergies        String?
  medCond          String?
  meds             String?
  chats            Chat[]
  glucoseReadings  GlucoseReading[]
  // predictedGlucose PredictedGlucose[]
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  chatId    String   @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  content   String
  role      String // 'system', 'user', or 'assistant'
  createdAt DateTime @default(now())
}

model GlucoseReading {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  value     Float
  timestamp DateTime @default(now()) @map("timestamp")
}

model PredictedGlucose {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  value        Float
  predictedFor DateTime @map("timestamp") // Matches API field name
  createdAt    DateTime @default(now())
}

model Food {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  giValue     Int      // Glycemic Index
  mealType    String   // "breakfast", "lunch", "dinner", "snack"
  imageUrl    String
  recipeLink  String
  calories    Int
  protein     Float
  fat         Float
  sugar       Float
  allergens   String[] // e.g., ["nuts", "dairy"]
  tags        String[] // e.g., ["vegetarian", "low-carb"]
}